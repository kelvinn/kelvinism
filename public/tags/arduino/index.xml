<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Arduino on Kelvin Nicholson</title>
    <link>http://localhost:1313/tags/arduino/</link>
    <description>Recent content in Arduino on Kelvin Nicholson</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jul 2009 20:30:00 +1000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/arduino/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing SMS Gateways</title>
      <link>http://localhost:1313/2009/07/testing-sms-gateways_5212.html</link>
      <pubDate>Tue, 14 Jul 2009 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2009/07/testing-sms-gateways_5212.html</guid>
      <description>&lt;p&gt;For one of my projects I&amp;rsquo;m testing an SMS gateway, and decided it would be fun to build a useful alarm clock out of it. For those of you who know Python, you may find this funny. /dev/ttyUSB0 is my Arduino with a temperature sensor.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import serial
import urllib2

def check\_temp():
ser = serial.Serial(&amp;#39;/dev/ttyUSB0&amp;#39;, 9600)
t = ser.readline().strip()
return float(t)

t = check\_temp()
if int(t) &amp;lt; 8:
message = &amp;#34;It+is+now+%f+degrees;+chuck+a+sicky.&amp;#34; % t
f = urllib2.urlopen(&amp;#39;http://api.clickatell.com/http/sendmsg?user=johnd&amp;amp;password=p@55w0rd&amp;amp;api\_id=2132867&amp;amp;from=61433735555&amp;amp;to=61433735555&amp;amp;text=%s&amp;#39; % message)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And in crontab:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arduino 101</title>
      <link>http://localhost:1313/2009/07/arduino-101_3715.html</link>
      <pubDate>Wed, 01 Jul 2009 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2009/07/arduino-101_3715.html</guid>
      <description>&lt;p&gt;Tonight, I&amp;rsquo;m proud to say, I&amp;rsquo;ve returned to childhood. Let me explain.&lt;/p&gt;
&lt;p&gt;OK, fun over, back to work.&lt;/p&gt;
&lt;p&gt;For the last year I&amp;rsquo;ve been wanting to purchase an &lt;a href=&#34;http://www.arduino.cc/&#34;&gt;Arduino&lt;/a&gt;, for no other reason than to play with. Like a kid. My Arduino arrived two days ago. This is a story of problems, but not the pull-your-hair-out type, more the&amp;hellip; like when you run out of gas in the middle of Sydney. Going to your Christmas dinner. In your friend&amp;rsquo;s car. Long story.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple Arduino &#43; LED Tutorial</title>
      <link>http://localhost:1313/2009/07/simple-arduino-led-tutorial_319.html</link>
      <pubDate>Wed, 01 Jul 2009 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2009/07/simple-arduino-led-tutorial_319.html</guid>
      <description>&lt;p&gt;For this you&amp;rsquo;ll need: an Arduino, an LED, a USB cable, and the Arduino software.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/lh/photo/VUU7F7qd8doQ0pCcs88wPQ?feat=embedwebsite&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgSGIXNe3gLRzm8r7ioq8niUHdBdzZBD8L9WoBp4oQAIAtlbMGaI7r3RjGzEup0sN-sZKP7E0JQuUaH9jTtPE0at4L6MK_QwduouTOIyQFyEzC2bB9U_Y8ausq1PNXwdbqUzOccLRPNg2FF/s400/arduinowLED.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get the LED, and plug it in to your Arduino. Plug in the long end to pin 13, plug the short end to the GND.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plug in the Arduino into your laptop. Go to Tools-&amp;gt;Serial Port. Choose the USB port that appears.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take the code from the &lt;a href=&#34;http://www.arduino.cc/en/Tutorial/BlinkingLED&#34;&gt;BlinkingLED tutorial&lt;/a&gt; and paste it in to the arduino like so:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Operation Cold House</title>
      <link>http://localhost:1313/2009/06/operation-cold-house_7266.html</link>
      <pubDate>Sun, 14 Jun 2009 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2009/06/operation-cold-house_7266.html</guid>
      <description>&lt;p&gt;Status:&lt;/p&gt;
&lt;p&gt;My house is cold. I want to start playing with simple electronics before starting &lt;a href=&#34;http://www.kelvinism.com/projects/operation-field/&#34;&gt;Operation Field&lt;/a&gt;, so have created Operation Cold House.&lt;/p&gt;
&lt;p&gt;This is just simply sticking a temperature sensor onto an Arduino, linking that up to my little home &amp;ldquo;&lt;a href=&#34;http://www.kelvinism.com/tech-blog/true-consolidation/&#34;&gt;server&lt;/a&gt;&amp;rdquo;, and uploading that to my website. I&amp;rsquo;ll display some nifty graphs, too, and link it to &lt;a href=&#34;http://www.pachube.com/&#34;&gt;Pachube&lt;/a&gt;. Stay tuned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Complete! The proof is &lt;a href=&#34;http://www.kelvinism.com/howtos/simple-arduino-led-tutorial/&#34;&gt;in the&lt;/a&gt; &lt;a href=&#34;http://www.kelvinism.com/tech-blog/arduino-101/&#34;&gt;pudding&lt;/a&gt;. I now have a personal website from home (sorry, not public) that displays the daily and weekly temperature at home. The process is basically like this: my little Arduino gathers the temperature, and is polled every minute with a python script via cron. This script then sticks the time and temperature into MySQL. It also exports the temperature to Pachube. Every 30m I have a script that queries MySQL and uses Google&amp;rsquo;s Chart&amp;rsquo;s API to graph the temperature. Looks great, I&amp;rsquo;ll post a graph soon.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Operation Field</title>
      <link>http://localhost:1313/2009/04/operation-field_8222.html</link>
      <pubDate>Mon, 13 Apr 2009 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2009/04/operation-field_8222.html</guid>
      <description>&lt;p&gt;Status:&lt;/p&gt;
&lt;p&gt;It is time for a new project. I&amp;rsquo;ve finally decided I want to do some electronics stuff - at least play around in that realm a little. However, I want to &amp;ldquo;get out and about&amp;rdquo; a little as well, so this leads me to my idea: a controllable long-range RC plane.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been debating whether to go the embedded Linux route, or the more simple microcontroller route. One of the first things I stumbled upon was &lt;a href=&#34;http://diydrones.com/profiles/blog/show?id=705844%3ABlogPost%3A44814&#34;&gt;ArduPilot&lt;/a&gt;, a cheap Arduino-based board allowing for a UAV. However, after looking through the requirements I would have needed to purchase an RF transmitter, and they aren&amp;rsquo;t cheap. This made me rethink the ArduPilot route and to evaluate what I really wanted to do: control the plan. My ultimate goal is to attach a joystick to my computer and be able to control the RC plane. This presents another problem with the ArduPilot, however, as there isn&amp;rsquo;t an extra Rx pin available on the ArduPilot board (or so the forums say), I wouldn&amp;rsquo;t be able to transmit coordinates on the fly.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
