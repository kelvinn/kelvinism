<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Kelvin Nicholson</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Kelvin Nicholson</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Jul 2014 18:13:00 +1000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solved: slow build times from Dockerfiles with Python packages (pip)</title>
      <link>http://localhost:1313/2014/07/solved-slow-build-times-from.html</link>
      <pubDate>Wed, 02 Jul 2014 18:13:00 +1000</pubDate>
      <guid>http://localhost:1313/2014/07/solved-slow-build-times-from.html</guid>
      <description>&lt;p&gt;I have recently had the opportunity to begin exploring &lt;a href=&#34;http://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, the currently hip way to build application containers, and I generally like it. It feels a bit like using Xen back in 2005, when you still had to download it from cl.cam.ac.uk, but there is &lt;em&gt;huge&lt;/em&gt; momentum right now. I like the idea of breaking down each component of your application into unique services and bundling them up - it seems clean. The next year is going to be very interesting with Docker, as I am especially looking forward to seeing how Google&amp;rsquo;s App Engine allows Docker usage, or what&amp;rsquo;s in store for the likes of Flynn, Deis, CoreOS, or Stackdock.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TLS Module In SaltStack Not Available (Fixed)</title>
      <link>http://localhost:1313/2014/05/tls-module-in-saltstack-not-available.html</link>
      <pubDate>Wed, 07 May 2014 12:50:00 +1000</pubDate>
      <guid>http://localhost:1313/2014/05/tls-module-in-saltstack-not-available.html</guid>
      <description>&lt;p&gt;I was trying to install &lt;a href=&#34;https://github.com/saltstack/halite&#34;&gt;HALite&lt;/a&gt;, the WebUI for &lt;a href=&#34;http://www.saltstack.com/&#34;&gt;SaltStack&lt;/a&gt;, using the provided instructions. However, I kept getting the following errors when trying to create the certificates using Salt:&lt;br&gt;
&lt;code&gt;   &#39;tls.create_ca_signed_cert&#39; is not available.   &#39;tls.create_ca&#39; is not available.&lt;/code&gt;&lt;br&gt;
Basically, the &amp;rsquo;tls&amp;rsquo; module in Salt simply didn&amp;rsquo;t appear to work. The reason for this is detailed on &lt;a href=&#34;http://intothesaltmine.org/install_and_configure_halite_alpha_on_arch_linux.html&#34;&gt;intothesaltmind.org&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Use of the tls module within Salt requires the pyopenssl python extension.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That makes sense. We can fix this with something like:&lt;br&gt;
&lt;code&gt;   apt-get install libffi-dev   pip install -U pyOpenSSL   /etc/init.d/salt-minion restart&lt;/code&gt;&lt;br&gt;
Or, better yet, with Salt alone:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finding The Same (Misspelled) Name Using Python/NLTK</title>
      <link>http://localhost:1313/2013/09/finding-same-misspelled-name-using.html</link>
      <pubDate>Fri, 13 Sep 2013 17:24:00 +1000</pubDate>
      <guid>http://localhost:1313/2013/09/finding-same-misspelled-name-using.html</guid>
      <description>&lt;p&gt;I have been meaning to play around with the &lt;a href=&#34;http://nltk.org/&#34;&gt;Natural Language Toolkit&lt;/a&gt; for quite some time, but I had been waiting for a time when I could experiment with it and actually create some value (as opposed to just play with it). A suitable use case appeared this week: matching strings. In particular, matching two different lists of many, many thousands of names.&lt;/p&gt;
&lt;p&gt;To give you an example, let&amp;rsquo;s say you had two lists of names, but with the name spelled incorrectly in one list:&lt;/p&gt;</description>
    </item>
    <item>
      <title>February Sydney Python Presentation</title>
      <link>http://localhost:1313/2013/02/february-sydney-python-presentation.html</link>
      <pubDate>Fri, 22 Feb 2013 23:10:00 +1100</pubDate>
      <guid>http://localhost:1313/2013/02/february-sydney-python-presentation.html</guid>
      <description>&lt;p&gt;In February I gave a presentation to about 80 people at the Sydney Python group hosted by Atlassian. Firstly, Atlassian&amp;rsquo;s office was beautiful, feeling a little like Google&amp;rsquo;s Sydney office, but with beer on tap instead of cereal dispensers. Secondly, the talk before me on Cython by &lt;a href=&#34;https://plus.google.com/113985890803565448326/posts&#34;&gt;Aaron Defazio&lt;/a&gt; was exceptionally interesting, garnering lots of questions from the audience. My presentation, more of a show and tell on piping location data to Google&amp;rsquo;s Latitude through App Engine, was also meant to subtly share my views on the need for innovation in the public sector (all sectors, really).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrate Custom Blog to Blogger</title>
      <link>http://localhost:1313/2013/01/migrate-custom-blog-to-blogger.html</link>
      <pubDate>Thu, 10 Jan 2013 20:14:00 +1100</pubDate>
      <guid>http://localhost:1313/2013/01/migrate-custom-blog-to-blogger.html</guid>
      <description>&lt;p&gt;For the last ten years I have run this website from various systems. First it was on Wordpress, then Mambo, then Joomla, and since early 2006 it has been running on custom code written using Django. I used this site as a learning tool for Django, re-wrote it after gaining more knowledge of Django, and then re-wrote it again when Google released App Engine. However, I recently realised that for the last few years I have spent more time writing little features than actually writing. I have entire trips that I never wrote because I was too busy writing code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Integrate imified into Django</title>
      <link>http://localhost:1313/2011/01/integrate-imified-into-django_2631.html</link>
      <pubDate>Tue, 18 Jan 2011 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2011/01/integrate-imified-into-django_2631.html</guid>
      <description>&lt;p&gt;I recently had the desire to send small updates to my so called &lt;a href=&#34;http://www.blogger.com/about-me/&#34;&gt;lifestream&lt;/a&gt; page via XMPP/GTalk. I played around with Twisted Words and several other Python XMPP clients, but I didn&amp;rsquo;t really want to keep a daemon running if unnecessary. It turns out imified took a lot of the pain out of it. The steps for me were as follows:&lt;br&gt;
Create an account with imified, and create a URL, e.g. /app/api/&lt;br&gt;
We then configure the &lt;strong&gt;urls.conf&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hacking Splunk with Python</title>
      <link>http://localhost:1313/2010/10/hacking-splunk-with-python_9416.html</link>
      <pubDate>Thu, 28 Oct 2010 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2010/10/hacking-splunk-with-python_9416.html</guid>
      <description>&lt;p&gt;A few weeks ago I saw an opening to give a 5-10 minute lightening talk at SyPy (Sydney Python), and with two nights to prepare, decided it would be interesting to explore Splunk&amp;rsquo;s usage of Python. Below was the quick presentation I gave.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using HTML in a Django form label</title>
      <link>http://localhost:1313/2010/07/using-html-in-django-form-label_2240.html</link>
      <pubDate>Sun, 11 Jul 2010 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2010/07/using-html-in-django-form-label_2240.html</guid>
      <description>&lt;p&gt;I recently had the need to add some HTML to the label for a form field using Django. The solution is pretty easy, except I didn&amp;rsquo;t see it written explicitly anywhere, and I missed the memo of the function I should be using.&lt;br&gt;
My form first just had the HTML in the form label as so:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
from django import forms

class AccountForm(forms.Form):
    name = forms.CharField(widget=forms.TextInput(), max\_length=15, label=&amp;#39;Your Name ([why](http://www.blogger.com/questions/whyname/)?&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, when I displayed it, the form was autoescaped.&lt;br&gt;
&lt;a href=&#34;http://picasaweb.google.com/lh/photo/PyGNXDrpXtrgBNnoOLlfLA?feat=embedwebsite&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvsLvb6I4SDBB3NKptLZzGLGnwUZK0KmYlx7X9UC2_fzyQCNTkeFiKz5-4_3BmKArYZhRwU8TNEIhrGAMsb039N47hxcY8BIMEJjfK1UafYCRvAPzY18c8ceq3QFOOsp_oGO6SavZ1LmGR/s800/accountsform.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 10.04, Django and GAE - Part 1</title>
      <link>http://localhost:1313/2010/06/ubuntu-1004-django-and-gae-part-1_8750.html</link>
      <pubDate>Sat, 12 Jun 2010 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2010/06/ubuntu-1004-django-and-gae-part-1_8750.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve started to get into Google&amp;rsquo;s App Engine again, and have started developing a simple product that I had a use for. The initial first draft was a quick 200 lines in webapp, and it worked great. However, I&amp;rsquo;m starting to find certain things quite cumbersome. I&amp;rsquo;m a huge fan of Django, and but also about keeping things as simple as possible, which is why I picked webapp to begin with.&lt;br&gt;
I&amp;rsquo;m now considering making a swap to Django, but there are some development issues; namely, I&amp;rsquo;m using Ubuntu 10.04, Python 2.6, and Django 1.2. This setup presents several setbacks, as GAE has the requirement of Django 1.1 and Python 2.5. There are two solutions that I found: a) use virtualenv, which &lt;a href=&#34;http://www.blogger.com/blogger.g?blogID=3439832858234004835#&#34;&gt;I&amp;rsquo;ve detailed&lt;/a&gt;, or b) chroot. This document will hopefully show how to configure a chroot environment of Ubuntu 9.10 and prepare it for Django on GAE. Using a jailed environment should allow you to edit your code with your normal IDE and VCS, but use Django 1.1 and Python 2.5.&lt;br&gt;
First, I installed schroot and debootstrap.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 10.04, Django and GAE - Part 2</title>
      <link>http://localhost:1313/2010/06/ubuntu-1004-django-and-gae-part-2_6130.html</link>
      <pubDate>Sat, 12 Jun 2010 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2010/06/ubuntu-1004-django-and-gae-part-2_6130.html</guid>
      <description>&lt;p&gt;All my Django sites are running 1.2, which poses a conflict with writing apps for Google&amp;rsquo;s App Engine, as use_library currently only supports &amp;lt; Django 1.1. There are two solutions that I found: a) use virtualenv, or b) chroot, which &lt;a href=&#34;http://www.kelvinism.com/howtos/ubuntu-1004-django-and-gae-part-1/&#34;&gt;I&amp;rsquo;ve already detailed&lt;/a&gt;. This document will hopefully show you how to create a virtual environment to use a secondary django version, especially for GAE. Of the two options, I think this one is a bit quicker, but there will likely be tradeoffs that a chroot environment can deal with better, e.g. python imaging (I don&amp;rsquo;t use it for GAE).&lt;br&gt;
First, install PIP and virtualenv:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Most Frequently Used French Words</title>
      <link>http://localhost:1313/2009/08/most-frequently-used-french-words_140.html</link>
      <pubDate>Sun, 30 Aug 2009 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2009/08/most-frequently-used-french-words_140.html</guid>
      <description>&lt;p&gt;Status:&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m currently studying French with my partner, and if you&amp;rsquo;ve read any of this site, you&amp;rsquo;ll notice I&amp;rsquo;m a bit of a techie. Often several of my interests collide, which is what happened today. I was searching for the &amp;ldquo;most frequent french words,&amp;rdquo; and while I found some lists, nothing was exactly what I wanted.&lt;br&gt;
My desire was to have a PDF of the top few thousand most used French words. With the English translation next to it. In order. I&amp;rsquo;ve found some great resources, which I&amp;rsquo;ll list now&lt;/p&gt;</description>
    </item>
    <item>
      <title>ISO Code Error</title>
      <link>http://localhost:1313/2009/06/iso-code-error_1265.html</link>
      <pubDate>Wed, 17 Jun 2009 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2009/06/iso-code-error_1265.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve received this error a few times when working with pytz:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Error reading file &amp;#39;/usr/share/xml/iso-codes/iso\_3166.xml&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In short, install the &amp;lsquo;iso-codes&amp;rsquo; package in Ubuntu/Debian. I&amp;rsquo;m sure this is covered in the manual that I didn&amp;rsquo;t read, but I&amp;rsquo;m sure others didn&amp;rsquo;t read it too.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt-get install iso-codes
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Zenoss Default Password</title>
      <link>http://localhost:1313/2008/12/zenoss-default-password_1357.html</link>
      <pubDate>Sat, 20 Dec 2008 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2008/12/zenoss-default-password_1357.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve evaluated Zenoss before, but forgot the default password, and searching for it didn&amp;rsquo;t come up with anything quickly. I tried everything under the sun: password, 1234, admin, God, Sex, but alas, grep to the rescue:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kelvin@monitor:/usr/local/zenoss/zenoss/etc$ grep admin \*
hubpasswd:admin:zenoss
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Update: it is listed on page 4 of the Admin PDF :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Integrating OSSEC with Cisco IOS</title>
      <link>http://localhost:1313/2008/11/integrating-ossec-with-cisco-ios_7061.html</link>
      <pubDate>Sat, 15 Nov 2008 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2008/11/integrating-ossec-with-cisco-ios_7061.html</guid>
      <description>&lt;p&gt;I rank OSSEC as one of my favorite pieces of open source software, and finally decided to play around with it more in my own free time. (Yup, I do this sort of stuff for &lt;em&gt;fun&lt;/em&gt;). My goal was quite simple: send syslog packets from my Cisco to my &amp;ldquo;proxy&amp;rdquo; server, running OSSEC. I found that, although OSSEC supports Cisco IOS logging, it didn&amp;rsquo;t really work. In fact, I couldn&amp;rsquo;t find any examples or articles of anybody actually getting it to work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Django with SQL Server and IIS</title>
      <link>http://localhost:1313/2008/11/using-django-with-sql-server-and-iis_4115.html</link>
      <pubDate>Sat, 08 Nov 2008 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2008/11/using-django-with-sql-server-and-iis_4115.html</guid>
      <description>&lt;p&gt;As you can tell from reading some of the other pages, I like Linux and open source. But I also like to answer the question &amp;ldquo;what if&amp;hellip;&amp;rdquo; This post is my [brief] run down of answering &amp;ldquo;what if I could run Django on Server 2003 with SQL Server and IIS.&amp;rdquo; Why, you may ask? To be honest with you, at this point, I don&amp;rsquo;t really know. One of the deciding factors was seeing that the django-mssql project maintains support for inspectdb, which means I could take a stock 2003 server running SQL Server, inspect the DB, and build a web app on top of it. The Django docs offer a lengthy &lt;a href=&#34;http://code.djangoproject.com/wiki/DjangoOnWindowsWithIISAndSQLServer&#34;&gt;howto&lt;/a&gt; for using Django with IIS and SQL Server, but the website for PyISAPIe seems to have been down for the last month or so. Without further delay, below are my notes on installing Django with SQL Server and IIS.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyGTK &#43; py2exe for Windows</title>
      <link>http://localhost:1313/2008/11/pygtk-py2exe-for-windows_8282.html</link>
      <pubDate>Sun, 02 Nov 2008 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2008/11/pygtk-py2exe-for-windows_8282.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m writing down these quick notes so I can remember the steps for getting py2exe to work with GTK.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the GTK+ runtime&lt;/li&gt;
&lt;li&gt;Download py2exe&lt;/li&gt;
&lt;li&gt;Copy over your project into the windows box&lt;/li&gt;
&lt;li&gt;Create a setup.py file (see below)&lt;/li&gt;
&lt;li&gt;Run &amp;ldquo;c:\Python25\python.exe setup.py py2exe&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Copy over the lib, etc, and share folder from C:\Program Files\GTK2-Runtime into the dist folder&lt;/li&gt;
&lt;li&gt;Run app!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from distutils.core import setup
import py2exe

setup(
name = &amp;#39;ploteq&amp;#39;,
description = &amp;#39;Bunnys Plotting Tool&amp;#39;,
version = &amp;#39;1.0&amp;#39;,

windows = \[
{
&amp;#39;script&amp;#39;: &amp;#39;ploteq.py&amp;#39;,
}
\],

options = {
&amp;#39;py2exe&amp;#39;: {
&amp;#39;packages&amp;#39;:&amp;#39;encodings&amp;#39;,
&amp;#39;includes&amp;#39;: &amp;#39;cairo, pango, pangocairo, atk, gobject&amp;#39;, 
}
},

data\_files=\[
&amp;#39;ploteq.glade&amp;#39;,
\]
)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Slope Finder for the Missus</title>
      <link>http://localhost:1313/2008/11/slope-finder-for-missus_5304.html</link>
      <pubDate>Sun, 02 Nov 2008 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2008/11/slope-finder-for-missus_5304.html</guid>
      <description>&lt;p&gt;Since I do sysadminy stuff all day, I don&amp;rsquo;t really get a chance to do much coding (or not as much of a chance as I would like). You can imagine my joy when my girlfriend expressed a problem she needed solved: &amp;ldquo;I&amp;rsquo;m going to need to solve 100s of slope equations, i.e. where two lines intersect. Can you write a program to do it?&amp;rdquo; Sure!&lt;/p&gt;
&lt;p&gt;I asked if she wanted to do a batch input or just a one-off type of deal, she decided on the latter. Although I&amp;rsquo;ve done a fair bit of PyGTK stuff, I had never actually needed to convert it to Windows. I debated using IronPython &amp;ndash; but needed to use a special library to help solve the equations (I&amp;rsquo;m lazy).&lt;/p&gt;</description>
    </item>
    <item>
      <title>GUI to Plot Driving Speed</title>
      <link>http://localhost:1313/2008/05/gui-to-plot-driving-speed_6997.html</link>
      <pubDate>Tue, 27 May 2008 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2008/05/gui-to-plot-driving-speed_6997.html</guid>
      <description>&lt;p&gt;I needed another Python fix, and I need one pretty badly. I spent the weekend wondering why it appears to be impossible to edit the GUIDs inside an Exchange mailbox store (read: NOT the GUIDs stored in AD for Exchange). Anyways, I digress.&lt;/p&gt;
&lt;p&gt;My goals were simple. I wanted to use Python, wanted something to do with traffic, and wanted to play around with Glade/PyGTK and graphing stuff. My end result was a little app that allows you to specify a GPX file, and it plots the waypoints (and calculates the moving average!). Pretty simple, pretty useless, but pretty fun. I really do like pretty pictures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Another Baby Step</title>
      <link>http://localhost:1313/2008/04/another-baby-step_1340.html</link>
      <pubDate>Tue, 29 Apr 2008 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2008/04/another-baby-step_1340.html</guid>
      <description>&lt;p&gt;I showed a few of my co-workers my graph and one replied &amp;ndash; oh! that&amp;rsquo;s really cool. (I think only two of my co-workers are actually interested in my geekyness). He then emailed me tonight a .kmz file containing a colorized file of his speed. I looked at the kml and noticed it appeared to be dynamically allocated judging by the top speed. Well, as you could guess, I surely had to modify my code to include colors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Mapnik on Ubuntu 7.10</title>
      <link>http://localhost:1313/2008/04/installing-mapnik-on-ubuntu-710_6688.html</link>
      <pubDate>Sat, 19 Apr 2008 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2008/04/installing-mapnik-on-ubuntu-710_6688.html</guid>
      <description>&lt;p&gt;I have managed to install mapnik 0.4, 0.5, 0.5.1 and various SVN releases in-between on Ubuntu. While this isn&amp;rsquo;t in itself exciting, I think I manage to stumble at every installation. I typically forget to add the flags when building, so, to prevent myself from stumbling again, I&amp;rsquo;m going to write them out here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build mapnik&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python scons/scons.py PYTHON=/usr/bin/python \\ 

PGSQL\_INCLUDES=/usr/include/postgresql \\

PGSQL\_LIBS=/usr/lib/postgresql BOOST\_INCLUDES=/usr/include/boost BOOST\_LIBS=/usr/lib
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Then install it&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo python scons/scons.py install PYTHON=/usr/bin/python \\ 

PGSQL\_INCLUDES=/usr/include/postgresql \\

PGSQL\_LIBS=/usr/lib/postgresql BOOST\_INCLUDES=/usr/include/boost BOOST\_LIBS=/usr/lib
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then proceed as normal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zenity GUI to a Shell Script</title>
      <link>http://localhost:1313/2007/10/zenity-gui-to-shell-script_5432.html</link>
      <pubDate>Sun, 21 Oct 2007 20:30:00 +1000</pubDate>
      <guid>http://localhost:1313/2007/10/zenity-gui-to-shell-script_5432.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/lh/photo/whbV2vHNOr5d7pvO8qsgRw?feat=embedwebsite&#34;&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEigBFNcFKSB9lKhJPiSiwDlp9q9SmO2yEu9v343B1M-2NFN5s2cJ-cUji8qR3LW1CmmitKztwUh3QxLAIjkSMYio5lIwhX1GszzhfZnufjrxugrWTNSZLH06e-qxV4ldttqBMDRBPWfXlc4/s800/zenityss.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have to admit, I&amp;rsquo;m pretty lazy. I don&amp;rsquo;t (ironically) like to type, and I really don&amp;rsquo;t like typing the same command over and over. I found myself switching between my external monitor and laptop quite frequently, and decided to somewhat automate the task. Although I know there are other programs out there that allow this, they either had too many features, or crashed. Xrandr works just fine, but like I said, I&amp;rsquo;m lazy&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python, AST and SOAP</title>
      <link>http://localhost:1313/2007/03/python-ast-and-soap_3058.html</link>
      <pubDate>Wed, 07 Mar 2007 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2007/03/python-ast-and-soap_3058.html</guid>
      <description>&lt;p&gt;For one of my projects I need to generate thumbnails for a page. And lots and lots and lots of them. Even though I can generate them via a python script and a very light &amp;ldquo;gtk browser&amp;rdquo;, I would prefer to mitigate the server load. To do this I&amp;rsquo;ve decided to tap into the Alexa Thumbnail Service. They allow two methods: REST and SOAP. After several hours of testing things out, I&amp;rsquo;ve decided to toss in the towel and settle on REST. If you can spot the error with my SOAP setup, I owe you a beer.&lt;br&gt;
I&amp;rsquo;m using the ZSI module for python.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS in Python (REST)</title>
      <link>http://localhost:1313/2007/03/aws-in-python-rest_5343.html</link>
      <pubDate>Sat, 03 Mar 2007 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2007/03/aws-in-python-rest_5343.html</guid>
      <description>&lt;p&gt;As some of you may know, I have some projects cooked up. I don&amp;rsquo;t expect to make a million bucks (wish me luck!), but a few extra bills in the pocket wouldn&amp;rsquo;t hurt. Plus, I&amp;rsquo;m highly considering further education, which will set me back a few-thirty grand. That said, one of my projects will rely heavily on &lt;a href=&#34;http://www.amazon.com/gp/redirect.html?ie=UTF8&amp;amp;location=http%3A%2F%2Fwww.amazon.com%2FAWS-home-page-Money%2Fb%3Fie%3DUTF8%26node%3D3435361&amp;amp;tag=kelvinismcom-20&amp;amp;linkCode=ur2&amp;amp;camp=1789&amp;amp;creative=9325&#34;&gt;Amazon Web Services&lt;/a&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=kelvinismcom-20&amp;l=ur2&amp;o=1&#34;&gt;. Amazon has, for quite some time now, opened up their information via REST and SOAP. I&amp;rsquo;ve been trying (virtually the entire day) to get SOAP to work, but seem to get snagged on a few issues. Stay tuned.&lt;br&gt;
However, in my quest to read every RTFM I stumbled upon a post regarding Python+REST to access &lt;a href=&#34;http://www.amazon.com/gp/redirect.html?ie=UTF8&amp;amp;location=http%3A%2F%2Fwww.amazon.com%2Fb%3Fie%3DUTF8%26node%3D269962011%26no%3D239513011%26me%3DA36L942TSJ2AJA&amp;amp;tag=kelvinismcom-20&amp;amp;linkCode=ur2&amp;amp;camp=1789&amp;amp;creative=9325&#34;&gt;Alexa Web Search&lt;/a&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://www.assoc-amazon.com/e/ir?t=kelvinismcom-20&amp;l=ur2&amp;o=1&#34;&gt;. After staring at Python code, especially trying to grapple why SOAP isn&amp;rsquo;t working, updating the outdated REST code was a 5 minute hack. So, if you are interested in using Alexa Web Search with Python via Rest, look below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python &#43; Web Developement</title>
      <link>http://localhost:1313/2006/01/python-web-developement_4306.html</link>
      <pubDate>Wed, 25 Jan 2006 21:30:00 +1100</pubDate>
      <guid>http://localhost:1313/2006/01/python-web-developement_4306.html</guid>
      <description>&lt;p&gt;A developer just showed me an interesting framework to produce python-backed sites VERY quickly. This is mainly for you Ian, it natively supports AJAX as well. Here&amp;rsquo;s the link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.turbogears.org/&#34;&gt;http://www.turbogears.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I watched the demo, pretty interesting.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
